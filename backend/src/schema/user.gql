scalar JSON
scalar Date

extend type Query {
  getUsers: [User]!
  getUser(id: Int!): GetUserResult!
}

extend type Mutation {
  register(input: UserRegisterInput): RegisterResult
  login(input: UserLoginInput): LoginResult
  updateUser(input: UserUpdateInput): UpdateUserResult
  resetUser(input: UserResetInput): LoginResult
}

input UserInput {
  email: String!
  firstName: String
  lastName: String
}

input UserRegisterInput {
  email: String!
  firstName: String
  lastName: String
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserUpdateInput {
  id: ID!
  tempCode: String
  newEmail: String
  newPassword: String
  newFirstName: String
  newLastName: String
  newSettings: JSON
}

input UserResetInput {
  tempCode: String
  password: String
}

union GetUserResult = User | UserNotFoundError
union LoginResult = AuthPayload | UserInvalidInputError
# Register is different, because this is a managed login. Users can't sign up
# themselves
union RegisterResult = RegisterUser | UserInvalidInputError
union UpdateUserResult = User | UserInvalidInputError

type User {
  id: ID!
  email: String!
  createdAt: Date!
  updatedAt: Date!
  tempCode: String
  tempCodeExpires: Date
  firstName: String
  lastName: String
  settings: JSON
}
type RegisterUser {
  id: ID!
  email: String!
  createdAt: Date!
  firstName: String
  lastName: String
}

type UserNotFoundError {
  message: String!
}

type UserInvalidInputError {
  message: String!
  field: String!
}

type AuthPayload {
  token: String!
  refresh: String!
}
